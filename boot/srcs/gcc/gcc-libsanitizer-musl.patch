Index: gcc-7.1.0/libsanitizer/sanitizer_common/sanitizer_linux.cc
===================================================================
--- gcc-7.1.0.orig/libsanitizer/sanitizer_common/sanitizer_linux.cc
+++ gcc-7.1.0/libsanitizer/sanitizer_common/sanitizer_linux.cc
@@ -25,7 +25,7 @@
 #include "sanitizer_stacktrace.h"
 #include "sanitizer_symbolizer.h"
 
-#if !SANITIZER_FREEBSD
+#if !SANITIZER_FREEBSD && defined(__GLIBC__)
 #include <asm/param.h>
 #endif
 
@@ -801,7 +801,7 @@ uptr GetPageSize() {
 // Android post-M sysconf(_SC_PAGESIZE) crashes if called from .preinit_array.
 #if SANITIZER_ANDROID
   return 4096;
-#elif SANITIZER_LINUX && (defined(__x86_64__) || defined(__i386__))
+#elif SANITIZER_LINUX && (defined(__x86_64__) || defined(__i386__)) && defined(__GLIBC__)
   return EXEC_PAGESIZE;
 #else
   return sysconf(_SC_PAGESIZE);  // EXEC_PAGESIZE may not be trustworthy.
Index: gcc-7.1.0/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cc
===================================================================
--- gcc-7.1.0.orig/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cc
+++ gcc-7.1.0/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cc
@@ -24,7 +24,7 @@
 #include "sanitizer_procmaps.h"
 #include "sanitizer_stacktrace.h"
 
-#if SANITIZER_ANDROID || SANITIZER_FREEBSD
+#if SANITIZER_ANDROID || SANITIZER_FREEBSD || (SANITIZER_LINUX && !defined(__GLIBC__))
 #include <dlfcn.h>  // for dlsym()
 #endif
 
Index: gcc-7.1.0/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc
===================================================================
--- gcc-7.1.0.orig/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc
+++ gcc-7.1.0/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc
@@ -67,7 +67,9 @@
 #include <linux/input.h>
 #include <linux/ioctl.h>
 #include <linux/soundcard.h>
+#if defined(__GLIBC__)
 #include <linux/sysctl.h>
+#endif
 #include <linux/utsname.h>
 #include <linux/posix_types.h>
 #include <net/if_arp.h>
@@ -135,10 +137,20 @@ typedef struct user_fpregs elf_fpregset_
 #include <glob.h>
 #include <obstack.h>
 #include <mqueue.h>
+#if defined(__GLIBC__)
 #include <net/if_ppp.h>
+#else
+#include <linux/if_ppp.h>
+#endif
+#if defined(__GLIBC__)
 #include <netax25/ax25.h>
 #include <netipx/ipx.h>
 #include <netrom/netrom.h>
+#else
+#include <linux/ax25.h>
+#include <linux/ipx.h>
+#include <linux/netrom.h>
+#endif
 #if HAVE_RPC_XDR_H
 # include <rpc/xdr.h>
 #elif HAVE_TIRPC_RPC_XDR_H
@@ -154,13 +166,17 @@ typedef struct user_fpregs elf_fpregset_
 # include <sys/procfs.h>
 #endif
 #include <sys/user.h>
+#if defined(__GLIBC__)
 #include <sys/ustat.h>
+#endif
 #include <linux/cyclades.h>
 #include <linux/if_eql.h>
 #include <linux/if_plip.h>
 #include <linux/lp.h>
 #include <linux/mroute.h>
+#if defined(__GLIBC__)
 #include <linux/mroute6.h>
+#endif
 #include <linux/scc.h>
 #include <linux/serial.h>
 #include <sys/msg.h>
@@ -222,13 +238,13 @@ namespace __sanitizer {
   unsigned struct_statfs64_sz = sizeof(struct statfs64);
 #endif // SANITIZER_MAC && !SANITIZER_IOS
 
-#if !SANITIZER_ANDROID
+#if !SANITIZER_ANDROID && defined(__GLIBC__)
   unsigned struct_statfs_sz = sizeof(struct statfs);
   unsigned struct_sockaddr_sz = sizeof(struct sockaddr);
   unsigned ucontext_t_sz = sizeof(ucontext_t);
 #endif // !SANITIZER_ANDROID
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX && !defined(__GLIBC__)
   unsigned struct_epoll_event_sz = sizeof(struct epoll_event);
   unsigned struct_sysinfo_sz = sizeof(struct sysinfo);
   unsigned __user_cap_header_struct_sz =
@@ -246,7 +262,7 @@ namespace __sanitizer {
   unsigned struct_itimerspec_sz = sizeof(struct itimerspec);
 #endif // SANITIZER_LINUX || SANITIZER_FREEBSD
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && defined(__GLIBC__)
   unsigned struct_ustat_sz = sizeof(struct ustat);
   unsigned struct_rlimit64_sz = sizeof(struct rlimit64);
   unsigned struct_statvfs64_sz = sizeof(struct statvfs64);
@@ -297,7 +313,7 @@ unsigned struct_ElfW_Phdr_sz = sizeof(El
 unsigned struct_ElfW_Phdr_sz = sizeof(Elf_Phdr);
 #endif
 
-#if (SANITIZER_LINUX || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
+#if ((SANITIZER_LINUX && defined(__GLIBC__)) || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
   int glob_nomatch = GLOB_NOMATCH;
   int glob_altdirfunc = GLOB_ALTDIRFUNC;
 #endif
@@ -402,6 +418,7 @@ unsigned struct_ElfW_Phdr_sz = sizeof(El
   unsigned struct_cdrom_tochdr_sz = sizeof(struct cdrom_tochdr);
   unsigned struct_cdrom_volctrl_sz = sizeof(struct cdrom_volctrl);
   unsigned struct_ff_effect_sz = sizeof(struct ff_effect);
+#if defined(__GLIBC__)
   unsigned struct_floppy_drive_params_sz = sizeof(struct floppy_drive_params);
   unsigned struct_floppy_drive_struct_sz = sizeof(struct floppy_drive_struct);
   unsigned struct_floppy_fdc_state_sz = sizeof(struct floppy_fdc_state);
@@ -409,6 +426,7 @@ unsigned struct_ElfW_Phdr_sz = sizeof(El
   unsigned struct_floppy_raw_cmd_sz = sizeof(struct floppy_raw_cmd);
   unsigned struct_floppy_struct_sz = sizeof(struct floppy_struct);
   unsigned struct_floppy_write_errors_sz = sizeof(struct floppy_write_errors);
+#endif
   unsigned struct_format_descr_sz = sizeof(struct format_descr);
   unsigned struct_hd_driveid_sz = sizeof(struct hd_driveid);
   unsigned struct_hd_geometry_sz = sizeof(struct hd_geometry);
@@ -416,7 +434,9 @@ unsigned struct_ElfW_Phdr_sz = sizeof(El
   unsigned struct_input_id_sz = sizeof(struct input_id);
   unsigned struct_mtpos_sz = sizeof(struct mtpos);
   unsigned struct_rtentry_sz = sizeof(struct rtentry);
+#if defined(__GLIBC__)
   unsigned struct_termio_sz = sizeof(struct termio);
+#endif
   unsigned struct_vt_consize_sz = sizeof(struct vt_consize);
   unsigned struct_vt_sizes_sz = sizeof(struct vt_sizes);
   unsigned struct_vt_stat_sz = sizeof(struct vt_stat);
@@ -441,7 +461,7 @@ unsigned struct_ElfW_Phdr_sz = sizeof(El
   unsigned struct_vt_mode_sz = sizeof(struct vt_mode);
 #endif // SANITIZER_LINUX || SANITIZER_FREEBSD
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && defined(__GLIBC__)
   unsigned struct_ax25_parms_struct_sz = sizeof(struct ax25_parms_struct);
   unsigned struct_cyclades_monitor_sz = sizeof(struct cyclades_monitor);
 #if EV_VERSION > (0x010000)
@@ -466,7 +486,7 @@ unsigned struct_ElfW_Phdr_sz = sizeof(El
   unsigned struct_unimapinit_sz = sizeof(struct unimapinit);
 #endif // SANITIZER_LINUX && !SANITIZER_ANDROID
 
-#if (SANITIZER_LINUX || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
+#if ((SANITIZER_LINUX && defined(__GLIBC__)) || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
   unsigned struct_audio_buf_info_sz = sizeof(struct audio_buf_info);
   unsigned struct_ppp_stats_sz = sizeof(struct ppp_stats);
 #endif // (SANITIZER_LINUX || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
@@ -809,7 +829,7 @@ unsigned struct_ElfW_Phdr_sz = sizeof(El
   unsigned IOCTL_VT_WAITACTIVE = VT_WAITACTIVE;
 #endif // SANITIZER_LINUX || SANITIZER_FREEBSD
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && defined(__GLIBC__)
   unsigned IOCTL_CYGETDEFTHRESH = CYGETDEFTHRESH;
   unsigned IOCTL_CYGETDEFTIMEOUT = CYGETDEFTIMEOUT;
   unsigned IOCTL_CYGETMON = CYGETMON;
@@ -972,7 +992,7 @@ CHECK_SIZE_AND_OFFSET(dl_phdr_info, dlpi
 CHECK_SIZE_AND_OFFSET(dl_phdr_info, dlpi_phnum);
 #endif // SANITIZER_LINUX || SANITIZER_FREEBSD
 
-#if (SANITIZER_LINUX || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
+#if ((SANITIZER_LINUX && defined(__GLIBC__)) || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
 CHECK_TYPE_SIZE(glob_t);
 CHECK_SIZE_AND_OFFSET(glob_t, gl_pathc);
 CHECK_SIZE_AND_OFFSET(glob_t, gl_pathv);
@@ -1068,6 +1088,7 @@ CHECK_STRUCT_SIZE_AND_OFFSET(sigaction,
 #endif
 
 #if SANITIZER_LINUX
+#if defined(__GLIBC__)
 CHECK_TYPE_SIZE(__sysctl_args);
 CHECK_SIZE_AND_OFFSET(__sysctl_args, name);
 CHECK_SIZE_AND_OFFSET(__sysctl_args, nlen);
@@ -1075,6 +1096,7 @@ CHECK_SIZE_AND_OFFSET(__sysctl_args, old
 CHECK_SIZE_AND_OFFSET(__sysctl_args, oldlenp);
 CHECK_SIZE_AND_OFFSET(__sysctl_args, newval);
 CHECK_SIZE_AND_OFFSET(__sysctl_args, newlen);
+#endif
 
 CHECK_TYPE_SIZE(__kernel_uid_t);
 CHECK_TYPE_SIZE(__kernel_gid_t);
@@ -1182,7 +1204,7 @@ CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_dstad
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_data);
 #endif
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX && defined(__GLIBC__)
 COMPILER_CHECK(sizeof(__sanitizer_mallinfo) == sizeof(struct mallinfo));
 #endif
 
@@ -1232,7 +1254,7 @@ COMPILER_CHECK(__sanitizer_XDR_DECODE ==
 COMPILER_CHECK(__sanitizer_XDR_FREE == XDR_FREE);
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && defined(__GLIBC__)
 COMPILER_CHECK(sizeof(__sanitizer_FILE) <= sizeof(FILE));
 CHECK_SIZE_AND_OFFSET(FILE, _flags);
 CHECK_SIZE_AND_OFFSET(FILE, _IO_read_ptr);
@@ -1261,12 +1283,14 @@ CHECK_SIZE_AND_OFFSET(obstack, chunk);
 CHECK_SIZE_AND_OFFSET(obstack, object_base);
 CHECK_SIZE_AND_OFFSET(obstack, next_free);
 
+#if defined(__GLIBC__)
 CHECK_TYPE_SIZE(cookie_io_functions_t);
 CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, read);
 CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, write);
 CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, seek);
 CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, close);
 #endif
+#endif
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD
 CHECK_TYPE_SIZE(sem_t);
Index: gcc-7.1.0/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
===================================================================
--- gcc-7.1.0.orig/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
+++ gcc-7.1.0/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
@@ -199,7 +199,7 @@ namespace __sanitizer {
     int gid;
     int cuid;
     int cgid;
-#ifdef __powerpc__
+#if defined(__powerpc__) || !defined(__GLIBC__)
     unsigned mode;
     unsigned __seq;
     u64 __unused1;
@@ -298,7 +298,7 @@ namespace __sanitizer {
   #endif
 #endif
   };
-#elif SANITIZER_FREEBSD
+#elif SANITIZER_FREEBSD || (SANITIZER_LINUX && !defined(__GLIBC__))
   struct __sanitizer_ipc_perm {
     unsigned int cuid;
     unsigned int cgid;
@@ -462,13 +462,28 @@ namespace __sanitizer {
     void *msg_name;
     unsigned msg_namelen;
     struct __sanitizer_iovec *msg_iov;
+#if defined(__GLIBC__)
     uptr msg_iovlen;
+#else
+		int msg_iovlen;
+		int __pad1;
+#endif
     void *msg_control;
+#if defined(__GLIBC__)
     uptr msg_controllen;
+#else
+		int msg_controllen;
+		int __pad2;
+#endif
     int msg_flags;
   };
   struct __sanitizer_cmsghdr {
+#if defined(__GLIBC__)
     uptr cmsg_len;
+#else
+		unsigned cmsg_len;
+		int __pad;
+#endif
     int cmsg_level;
     int cmsg_type;
   };
Index: gcc-7.1.0/libsanitizer/interception/interception_linux.cc
===================================================================
--- gcc-7.1.0.orig/libsanitizer/interception/interception_linux.cc
+++ gcc-7.1.0/libsanitizer/interception/interception_linux.cc
@@ -22,7 +22,7 @@ bool GetRealFunctionAddress(const char *
   return real == wrapper;
 }
 
-#if !defined(__ANDROID__)  // android does not have dlvsym
+#if !defined(__ANDROID__) && defined(__GLIBC__)  // android does not have dlvsym
 void *GetFuncAddrVer(const char *func_name, const char *ver) {
   return dlvsym(RTLD_NEXT, func_name, ver);
 }
Index: gcc-7.1.0/libsanitizer/asan/asan_linux.cc
===================================================================
--- gcc-7.1.0.orig/libsanitizer/asan/asan_linux.cc
+++ gcc-7.1.0/libsanitizer/asan/asan_linux.cc
@@ -40,6 +40,10 @@
 #if SANITIZER_ANDROID || SANITIZER_FREEBSD
 #include <ucontext.h>
 extern "C" void* _DYNAMIC;
+#elif SANITIZER_LINUX && !defined(__GLIBC__)
+#include <ucontext.h>
+#include <link.h>
+extern "C" void* _DYNAMIC;
 #else
 #include <sys/ucontext.h>
 #include <link.h>
Index: gcc-7.1.0/libsanitizer/tsan/tsan_platform_linux.cc
===================================================================
--- gcc-7.1.0.orig/libsanitizer/tsan/tsan_platform_linux.cc
+++ gcc-7.1.0/libsanitizer/tsan/tsan_platform_linux.cc
@@ -285,7 +285,7 @@ void InitializePlatform() {
 // This is required to properly "close" the fds, because we do not see internal
 // closes within glibc. The code is a pure hack.
 int ExtractResolvFDs(void *state, int *fds, int nfd) {
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX && defined(__GLIBC__)) && !SANITIZER_ANDROID
   int cnt = 0;
   __res_state *statp = (__res_state*)state;
   for (int i = 0; i < MAXNS && cnt < nfd; i++) {
